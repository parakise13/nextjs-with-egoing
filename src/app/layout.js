// "use client";

import Link from "next/link";
import "./globals.css";
import { Control } from "./Control";

// import { useEffect, useState } from "react";
// export const metadata = {
//     title: "Web Tutorials",
//     description: "Generated by lucia",
// };

export default async function RootLayout({ children }) {
    // const [topics, setTopics] = useState([]);
    // useEffect(() => {
    // fetch("http://localhost:9999/topics")
    //     .then((res) => res.json())
    //     .then((result) => {
    //         setTopics(result);
    //     });
    // }, []);

    // npx json-server --port 9999 --watch db.json
    // 상기의 명령어로 json-server를 실행 => db.json 파일이 생성되고 수정도 가능 => 거기서 데이터를 받아옴.
    // log를 보면 cache: MISS라고 되어있으면 캐시를 사용하지X.cache: HIT면 캐시를 사용했다는 뜻.캐시를 사용하게 되면 페이지를 리로드해도 데이터를 BUILD를 다시하기 전까지는 데이터를 다시 가져오지 않음. => cache 옵션을 통해 조정가능
    // revalidate를 0으로 주거나 cache : 'no-store'로

    // server component에서 환경변수 사용
    // 기본적으로는 환경변수는 server component에서만 접근이 가능하기 때문에
    // NEXT_PUBLIC을 붙여줘야 client component에서 사용가능
    const resp = await fetch(`${process.env.NEXT_PUBLIC_API_URL}topics`, {
        cache: "no-store",
    });
    // 기본적으로 nextjs13은 데이터를 가져오면 cache에 저장함.
    const topics = await resp.json();

    return (
        <html>
            <body>
                <h1>
                    <Link href="/">WEB</Link>
                </h1>
                <ol>
                    {topics.map((topic) => {
                        return (
                            <li key={topic.id}>
                                <Link href={`/read/${topic.id}`}>
                                    {topic.title}
                                </Link>
                            </li>
                        );
                    })}
                </ol>
                {children}
                <Control />
            </body>
            {/* page.js가 return한 값이 children자리에 온다 */}
        </html>
    );
}
